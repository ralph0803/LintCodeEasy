/**
 * 本代码由九章算法编辑提供。没有版权欢迎转发。
 * - 九章算法致力于帮助更多中国人找到好的工作，教师团队均来自硅谷和国内的一线大公司在职工程师。
 * - 现有的面试培训课程包括：九章算法班，系统设计班，BAT国内班
 * - 更多详情请见官方网站：http://www.jiuzhang.com/
 */
 
/**
     * 这道题可以用快速选择一个类似快速排序的方法。
     * 如果数组长度为n,这道题求中位数实际上可以转化为求整个数组当中第(n+1)/2大的数，
     * 每次选择数组里面最左边的元素然后把数组里面比它大的放在数组它右边，
     * 比它小的放在左边，然后知道这个元素是在整个数组当中的第x大.如果x<(n+1)/2, 
     * 那么可以这个元素右边的数组里面找第(n+1)/2大，如果是x>(n+1)/2，
     * 那么在这个元素左边的数组里面找第(n+1)/2大。以此递归的查询。
     * 直到x 等于(n+1)/2 停止递归。我们采用这种方法的均摊时间复杂度为O(n).
*/

public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: An integer denotes the middle number of the array.
     */
    public int median(int[] nums) {
        return sub(nums, 0, nums.length - 1, (nums.length + 1)/2);
    }
    // 模板！！！
    private int sub(int[] nums, int start, int end, int size) {
        int mid = (start + end) / 2;
        int pivot = nums[mid];
        int i = start - 1, j = end + 1;
        for (int k = start; k < j; k++) {
            if (nums[k] < pivot) {
                i++;
                int tmp = nums[i];
                nums[i] = nums[k];
                nums[k] = tmp;
            } else if (nums[k] > pivot) {
                j--;
                int tmp = nums[j];
                nums[j] = nums[k];
                nums[k] = tmp;
                k--;
            }
        }
        if (i - start + 1 >= size) {
            // i在pivot的后面，说明小于pivot的数多
            return sub(nums, start, i, size);
        } else if (j - start >= size) {
            // j在pivot之后一位停下，说明正好
            return nums[j-1];
        } else {
            // j在pivot之前，说明大于pivot的数多
            return sub(nums, j, end, size - (j - start));
        }
    }
}
