/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: The head of linked list.
     */
    public ListNode insertionSortList(ListNode head) {
        // write your code here
        if(head == null) {
            return null;
        }
        
        // build another new list to store the result, initially is empty.
        // pre is at the pre node in the result list, cur and next is at the given list.
        // every time, grab one node from the given list and insert it into the proper position in the result list 
        ListNode helper = new ListNode(0);  
        ListNode pre = helper;
        ListNode cur = head;
        while(cur!=null) {  
            ListNode next = cur.next;  
            pre = helper;  
            while(pre.next!=null && pre.next.val<=cur.val) {
                pre = pre.next;
            }  
            cur.next = pre.next;  
            pre.next = cur;  
            cur = next;  
        }  
        return helper.next; 
    }
}
