/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param x: an integer
     * @return: a ListNode 
     */
    public ListNode partition(ListNode head, int x) {
        // write your code here
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode less = new ListNode(0);
        ListNode more = new ListNode(0);
        ListNode tmp1 = less;
        ListNode tmp2 = more;
        ListNode tmp3 = null;
        
        // TEMPLATE for VALUE TRANSFER IN DIFFERENT LISTS...
        while(head != null) {
            if(head.val < x) {
                tmp3 = head.next;
                head.next = tmp1.next;
                tmp1.next = head;
                head = tmp3;
                tmp1 = tmp1.next;
            } else {
                tmp3 = head.next;
                head.next = tmp2.next;
                tmp2.next = head;
                head = tmp3;
                tmp2 = tmp2.next;
            }
        }
        // connect less and more
        tmp1.next = more.next;
        return less.next;
    }
}

