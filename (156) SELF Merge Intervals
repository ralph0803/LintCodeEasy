/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        // NOT RETURN NULL, just return the intervals itself.
        if (intervals == null || intervals.size() == 0) {
            return intervals;
        }
        
        Interval tmp = null;
        
        // sort first, but not efficient!!!
        for (int ii = 0; ii < intervals.size(); ii++) {
            for (int jj = ii; jj < intervals.size(); jj++) {
                if (intervals.get(ii).start == intervals.get(jj).start) {
                    if (intervals.get(ii).end > intervals.get(jj).end) {
                        tmp = intervals.get(ii);
                        intervals.set(ii,intervals.get(jj));
                        intervals.set(jj,tmp);
                    }
                } else if (intervals.get(ii).start > intervals.get(jj).start) {
                    tmp = intervals.get(ii);
                    intervals.set(ii,intervals.get(jj));
                    intervals.set(jj,tmp);
                }
            }
        }
        
        int len = intervals.size();
        int i = 0;
        
        while (i < len - 1) {
            if (intervals.get(i).end >= intervals.get(i+1).start) {
                intervals.get(i).end = Math.max(intervals.get(i).end, intervals.get(i+1).end);
                intervals.remove(i+1);
                len--;
            } else {
                i++;
            }
        }
        return intervals;
    }
}
