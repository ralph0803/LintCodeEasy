/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param ListNode l1 is the head of the linked list
     * @param ListNode l2 is the head of the linked list
     * @return: ListNode head of linked list
     */
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // write your code here
        if (l1 == null) {
            return l2;
        } else if (l2 == null) {
            return l1;
        }
        
        ListNode point1 = l1;
        ListNode point2 = l2;
        ListNode result = new ListNode(0);
        ListNode tmp1 = result;
        ListNode tmp2 = null;
        
        while(point1 != null && point2 != null) {
            if (point1.val < point2.val) {
                tmp2 = point1.next;
                point1.next = tmp1.next;
                tmp1.next = point1;
                point1 = tmp2;
                tmp1 = tmp1.next;
            } else if (point2.val <= point1.val) {
                tmp2 = point2.next;
                point2.next = tmp1.next;
                tmp1.next = point2;
                point2 = tmp2;
                tmp1 = tmp1.next;
            }
        }
        
        // copy the rest of list
        if (point2 == null) {
            tmp1.next = point1;
        } 
        
        if (point1 == null) {
            tmp1.next = point2;
        }
        return result.next;
    }
}
